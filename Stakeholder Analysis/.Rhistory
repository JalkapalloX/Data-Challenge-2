A_data$test_id <- paste0(A_data$device_type, "_", A_data$operating_system, "_", A_data$campaign_group_id)
B_data <- data[data$test_group == "B",]
B_data$test_id <- paste0(B_data$device_type, "_", B_data$operating_system, "_", B_data$campaign_group_id)
test_data <- rbind(A_data[sapply(A_data$test_id, function(x) {(x %in% B_data$test_id)}),],
B_data[sapply(B_data$test_id, function(x) {(x %in% A_data$test_id)}),])
return(test_data)
}
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# two-sample t-test:
for (i in c("UU_conv_per_UU_click",
"UU_conv_per_UU_click",
"UU_click_per_UU_impression")){
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c(i)))
print(i)
print(cor(data_ttest$A, data_ttest$B))
data_ttest$increase <- data_ttest$B - data_ttest$A
print(mean(data_ttest$increase))
}
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c("UU_conv_per_UU_click")))
data_ttest$increase <- data_ttest$B - data_ttest$A
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("data.table")) install.packages("data.table")
library(data.table)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# PREPROCESSING
data <- read.csv("C:/Users/Jaymon/Documents/GitHub/Data-Challenge-2/Data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
clean_by <- function(data, column.names) {
# Delete empty lines
data <- data[!is.na(data$advertiser_id),]
### Buyer bid is per 1000, but linearly relates to impressions
# Some buyer bids are 0's
if("buyer_bid" %in% column.names) {
data <- data[data$buyer_bid != 0,]
}
# Sometimes there are conversions after clicks but no clicks
if("clicks" %in% column.names) {
data <- data[!(data$clicks == 0 & data$post_click_conv != 0),]
}
### These numbers are questionable regardless.
if("unique_user_is_click" %in% column.names) {
data <- data[data$unique_user_is_click >= data$unique_user_post_click_conv,]
}
if("unique_user_post_click_conv" %in% column.names) {
data <- data[data$unique_user_is_click >= data$unique_user_post_click_conv,]
}
return(data)
}
omit_zeros <- function(data, column.names) {
for(i in column.names) {
data <- data[ data[[ i ]] != 0,]
}
}
get_AB <- function(data) {
A_data <- data[data$test_group == "A",]
A_data$test_id <- paste0(A_data$device_type, "_", A_data$operating_system, "_", A_data$campaign_group_id)
B_data <- data[data$test_group == "B",]
B_data$test_id <- paste0(B_data$device_type, "_", B_data$operating_system, "_", B_data$campaign_group_id)
test_data <- rbind(A_data[sapply(A_data$test_id, function(x) {(x %in% B_data$test_id)}),],
B_data[sapply(B_data$test_id, function(x) {(x %in% A_data$test_id)}),])
return(test_data)
}
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# two-sample t-test:
for (i in c("UU_conv_per_UU_click",
"UU_conv_per_UU_click",
"UU_click_per_UU_impression")){
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c(i)))
data_ttest$increase <- data_ttest$B - data_ttest$A
print(mean(data_ttest$increase))
}
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c("UU_conv_per_UU_click")))
data_ttest$increase <- data_ttest$B - data_ttest$A
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("data.table")) install.packages("data.table")
library(data.table)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# PREPROCESSING
data <- read.csv("C:/Users/Jaymon/Documents/GitHub/Data-Challenge-2/Data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
clean_by <- function(data, column.names) {
# Delete empty lines
data <- data[!is.na(data$advertiser_id),]
### Buyer bid is per 1000, but linearly relates to impressions
# Some buyer bids are 0's
if("buyer_bid" %in% column.names) {
data <- data[data$buyer_bid != 0,]
}
# Sometimes there are conversions after clicks but no clicks
if("clicks" %in% column.names) {
data <- data[!(data$clicks == 0 & data$post_click_conv != 0),]
}
### These numbers are questionable regardless.
if("unique_user_is_click" %in% column.names) {
data <- data[data$unique_user_is_click >= data$unique_user_post_click_conv,]
}
if("unique_user_post_click_conv" %in% column.names) {
data <- data[data$unique_user_is_click >= data$unique_user_post_click_conv,]
}
return(data)
}
omit_zeros <- function(data, column.names) {
for(i in column.names) {
data <- data[ data[[ i ]] != 0,]
}
}
get_AB <- function(data) {
A_data <- data[data$test_group == "A",]
A_data$test_id <- paste0(A_data$device_type, "_", A_data$operating_system, "_", A_data$campaign_group_id)
B_data <- data[data$test_group == "B",]
B_data$test_id <- paste0(B_data$device_type, "_", B_data$operating_system, "_", B_data$campaign_group_id)
test_data <- rbind(A_data[sapply(A_data$test_id, function(x) {(x %in% B_data$test_id)}),],
B_data[sapply(B_data$test_id, function(x) {(x %in% A_data$test_id)}),])
return(test_data)
}
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# two-sample t-test:
for (i in c("UU_conv_per_UU_click",
"UU_conv_per_UU_inview",
"UU_click_per_UU_impression")){
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c(i)))
data_ttest$increase <- data_ttest$B - data_ttest$A
print(mean(data_ttest$increase))
}
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c("UU_conv_per_UU_click")))
data_ttest$increase <- data_ttest$B - data_ttest$A
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("data.table")) install.packages("data.table")
library(data.table)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# PREPROCESSING
data <- read.csv("C:/Users/Jaymon/Documents/GitHub/Data-Challenge-2/Data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
clean_by <- function(data, column.names) {
# Delete empty lines
data <- data[!is.na(data$advertiser_id),]
### Buyer bid is per 1000, but linearly relates to impressions
# Some buyer bids are 0's
if("buyer_bid" %in% column.names) {
data <- data[data$buyer_bid != 0,]
}
# Sometimes there are conversions after clicks but no clicks
if("clicks" %in% column.names) {
data <- data[!(data$clicks == 0 & data$post_click_conv != 0),]
}
### These numbers are questionable regardless.
if("unique_user_is_click" %in% column.names) {
data <- data[data$unique_user_is_click >= data$unique_user_post_click_conv,]
}
if("unique_user_post_click_conv" %in% column.names) {
data <- data[data$unique_user_is_click >= data$unique_user_post_click_conv,]
}
return(data)
}
omit_zeros <- function(data, column.names) {
for(i in column.names) {
data <- data[ data[[ i ]] != 0,]
}
}
get_AB <- function(data) {
A_data <- data[data$test_group == "A",]
A_data$test_id <- paste0(A_data$device_type, "_", A_data$operating_system, "_", A_data$campaign_group_id)
B_data <- data[data$test_group == "B",]
B_data$test_id <- paste0(B_data$device_type, "_", B_data$operating_system, "_", B_data$campaign_group_id)
test_data <- rbind(A_data[sapply(A_data$test_id, function(x) {(x %in% B_data$test_id)}),],
B_data[sapply(B_data$test_id, function(x) {(x %in% A_data$test_id)}),])
return(test_data)
}
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# two-sample t-test:
for (i in c("UU_conv_per_UU_click",
"UU_conv_per_UU_inview",
"UU_click_per_UU_impression",
"UU_inview_per_UU_impression")){
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c(i)))
data_ttest$increase <- data_ttest$B - data_ttest$A
print(mean(data_ttest$increase))
}
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c("UU_conv_per_UU_click")))
data_ttest$increase <- data_ttest$B - data_ttest$A
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("data.table")) install.packages("data.table")
library(data.table)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# PREPROCESSING
data <- read.csv("C:/Users/Jaymon/Documents/GitHub/Data-Challenge-2/Data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
clean_by <- function(data, column.names) {
# Delete empty lines
data <- data[!is.na(data$advertiser_id),]
### Buyer bid is per 1000, but linearly relates to impressions
# Some buyer bids are 0's
if("buyer_bid" %in% column.names) {
data <- data[data$buyer_bid != 0,]
}
# Sometimes there are conversions after clicks but no clicks
if("clicks" %in% column.names) {
data <- data[!(data$clicks == 0 & data$post_click_conv != 0),]
}
### These numbers are questionable regardless.
if("unique_user_is_click" %in% column.names) {
data <- data[data$unique_user_is_click >= data$unique_user_post_click_conv,]
}
if("unique_user_post_click_conv" %in% column.names) {
data <- data[data$unique_user_is_click >= data$unique_user_post_click_conv,]
}
return(data)
}
omit_zeros <- function(data, column.names) {
for(i in column.names) {
data <- data[ data[[ i ]] != 0,]
}
}
get_AB <- function(data) {
A_data <- data[data$test_group == "A",]
A_data$test_id <- paste0(A_data$device_type, "_", A_data$operating_system, "_", A_data$campaign_group_id)
B_data <- data[data$test_group == "B",]
B_data$test_id <- paste0(B_data$device_type, "_", B_data$operating_system, "_", B_data$campaign_group_id)
test_data <- rbind(A_data[sapply(A_data$test_id, function(x) {(x %in% B_data$test_id)}),],
B_data[sapply(B_data$test_id, function(x) {(x %in% A_data$test_id)}),])
return(test_data)
}
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# two-sample t-test:
for (i in c("UU_conv_per_UU_click",
"UU_conv_per_UU_inview",
"UU_click_per_UU_impression",
"UU_inview_per_UU_impression",
"inview_per_impression")){
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c(i)))
data_ttest$increase <- data_ttest$B - data_ttest$A
print(mean(data_ttest$increase))
}
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c("UU_conv_per_UU_click")))
data_ttest$increase <- data_ttest$B - data_ttest$A
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("data.table")) install.packages("data.table")
library(data.table)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# PREPROCESSING
data <- read.csv("C:/Users/Jaymon/Documents/GitHub/Data-Challenge-2/Data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
clean_by <- function(data, column.names) {
# Delete empty lines
data <- data[!is.na(data$advertiser_id),]
### Buyer bid is per 1000, but linearly relates to impressions
# Some buyer bids are 0's
if("buyer_bid" %in% column.names) {
data <- data[data$buyer_bid != 0,]
}
# Sometimes there are conversions after clicks but no clicks
if("clicks" %in% column.names) {
data <- data[!(data$clicks == 0 & data$post_click_conv != 0),]
}
### These numbers are questionable regardless.
if("unique_user_is_click" %in% column.names) {
data <- data[data$unique_user_is_click >= data$unique_user_post_click_conv,]
}
if("unique_user_post_click_conv" %in% column.names) {
data <- data[data$unique_user_is_click >= data$unique_user_post_click_conv,]
}
return(data)
}
omit_zeros <- function(data, column.names) {
for(i in column.names) {
data <- data[ data[[ i ]] != 0,]
}
}
get_AB <- function(data) {
A_data <- data[data$test_group == "A",]
A_data$test_id <- paste0(A_data$device_type, "_", A_data$operating_system, "_", A_data$campaign_group_id)
B_data <- data[data$test_group == "B",]
B_data$test_id <- paste0(B_data$device_type, "_", B_data$operating_system, "_", B_data$campaign_group_id)
test_data <- rbind(A_data[sapply(A_data$test_id, function(x) {(x %in% B_data$test_id)}),],
B_data[sapply(B_data$test_id, function(x) {(x %in% A_data$test_id)}),])
return(test_data)
}
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# two-sample t-test:
for (i in c("UU_conv_per_UU_click",
"UU_conv_per_UU_inview",
"UU_click_per_UU_impression",
"UU_inview_per_UU_impression",
"inview_per_impression")){
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c(i)))
data_ttest$increase <- data_ttest$B - data_ttest$A
print(i)
print(mean(data_ttest$increase))
}
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c("UU_conv_per_UU_click")))
data_ttest$increase <- data_ttest$B - data_ttest$A
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("data.table")) install.packages("data.table")
library(data.table)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# PREPROCESSING
data <- read.csv("C:/Users/Jaymon/Documents/GitHub/Data-Challenge-2/Data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
clean_by <- function(data, column.names) {
# Delete empty lines
data <- data[!is.na(data$advertiser_id),]
### Buyer bid is per 1000, but linearly relates to impressions
# Some buyer bids are 0's
if("buyer_bid" %in% column.names) {
data <- data[data$buyer_bid != 0,]
}
# Sometimes there are conversions after clicks but no clicks
if("clicks" %in% column.names) {
data <- data[!(data$clicks == 0 & data$post_click_conv != 0),]
}
### These numbers are questionable regardless.
if("unique_user_is_click" %in% column.names) {
data <- data[data$unique_user_is_click >= data$unique_user_post_click_conv,]
}
if("unique_user_post_click_conv" %in% column.names) {
data <- data[data$unique_user_is_click >= data$unique_user_post_click_conv,]
}
return(data)
}
omit_zeros <- function(data, column.names) {
for(i in column.names) {
data <- data[ data[[ i ]] != 0,]
}
}
get_AB <- function(data) {
A_data <- data[data$test_group == "A",]
A_data$test_id <- paste0(A_data$device_type, "_", A_data$operating_system, "_", A_data$campaign_group_id)
B_data <- data[data$test_group == "B",]
B_data$test_id <- paste0(B_data$device_type, "_", B_data$operating_system, "_", B_data$campaign_group_id)
test_data <- rbind(A_data[sapply(A_data$test_id, function(x) {(x %in% B_data$test_id)}),],
B_data[sapply(B_data$test_id, function(x) {(x %in% A_data$test_id)}),])
return(test_data)
}
get_AB(data)
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# two-sample t-test:
for (i in c("UU_conv_per_UU_click",
"UU_conv_per_UU_inview",
"UU_click_per_UU_impression",
"UU_inview_per_UU_impression",
"inview_per_impression")){
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c(i)))
data_ttest$increase <- data_ttest$B - data_ttest$A
print(i)
print(mean(data_ttest$increase))
}
data_ttest <- na.omit(dcast(data2, campaign_group_id+device_type+operating_system~test_group, fun=mean, value.var=c("UU_conv_per_UU_click")))
data_ttest$increase <- data_ttest$B - data_ttest$A
