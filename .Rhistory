y<- beta1*x1+b2*x2
y_vec<-c(y,y_vec)
}
for (beta1 in b1) {
y_vec<-c()
y<- beta1*x1+b2*x2
y_vec<-c(y,y_vec)
}
for (beta1 in b1) {y_vec<-
)
for (beta1 in b1) {
y_vec<-c()
y<- beta1*x1+b2*x2
y_vec<-c(y,y_vec)
}
y_vec<-c()
for (beta1 in b1) {
y<- beta1*x1+b2*x2
y_vec<-c(y,y_vec)
}
plot(x = b1,y = y_vec)
clear
-10:10
length(-10:10)
> set.seed(9114)
> e2_x1 <- rnorm(100, mean=0, sd=1)
> e2_x2 <- rnorm(100, mean=0, sd=1)
>
> b1 <- 1
>
> y_vec <- c()
> b2_vec <- c()
>
> for(b2 in -10:10){
+     y <- b1*e2_x1 + b2*e2_x2
+     y_vec <- cbind(y_vec, y)
+     b2_vec <- cbind(b2_vec, b2)
+ }
set.seed(9114)
e2_x1 <- rnorm(100, mean=0, sd=1)
e2_x2 <- rnorm(100, mean=0, sd=1)
b1 <- 1
y_vec <- c()
b2_vec <- c()
for(b2 in -10:10){
y <- b1*e2_x1 + b2*e2_x2
y_vec <- cbind(y_vec, y)
b2_vec <- cbind(b2_vec, b2)
}
set.seed(6)
x1 = rnorm(n = 100,mean = 0,sd = 1)
x2 = rnorm(n = 100,mean = 0,sd = 1)
y  = x1*1 + x2*1
set.seed(6)
x1 = rnorm(n = 100,mean = 0,sd = 1)
x2 = rnorm(n = 100,mean = 0,sd = 1)
y  = x1*1 + x2*1
b1 = seq(from = -10, to = 10,by = 1)
b2 = 1
q_vec<-c()
for (beta1 in b1) {
yi<- beta1*x1+b2*x2
q = sum((y-yi)^2))
q_vec<-c(q,q_vec)
}
b1 = seq(from = -10, to = 10,by = 1)
b2 = 1
q_vec<-c()
for (beta1 in b1) {
yi<- beta1*x1+b2*x2
q = sum((y-yi)^2)
q_vec<-c(q,q_vec)
}
plot(x=b1,y=q_vec)
set.seed(6)
x1 = rnorm(n = 100,mean = 0,sd = 1)
x2 = rnorm(n = 100,mean = 0,sd = 1)
y  = x1*1 + x2*1
b1 = seq(from = -10, to = 10,by = 0.1)
b2 = 1
q_vec<-c()
for (beta1 in b1) {
yi<- beta1*x1+b2*x2
q = sum((y-yi)^2)
q_vec<-c(q,q_vec)
}
plot(x=b1,y=q_vec)
load("C:/onedrive/onedriveSYNC/DS2017/Q3/resit CT/code/all_table.csv")
load("C:/onedrive/onedriveSYNC/DS2017/Q3/resit CT/code/all_table.csv")
load("C:/onedrive/onedriveSYNC/DS2017/Q3/resit CT/code/all_table.xlsx")
load("C:/onedrive/onedriveSYNC/DS2017/Q3/resit CT/code/all_table.csv")
library(readxl)
all_table <- read_excel("C:/onedrive/onedriveSYNC/DS2017/Q3/resit CT/code/all_table.xlsx")
View(all_table)
hist(all_table)
hist(all_table$`Happiness Score`)
plot(all_table$`Happiness Score`,all_table$GDP_PPP_percapita)
lm(all_table$`Happiness Score`~all_table$GDP_PPP_percapita)
plot(y = all_table$`Happiness Score`,x = all_table$GDP_PPP_percapita)
abline(lm(all_table$`Happiness Score`~all_table$GDP_PPP_percapita))
plot(y = all_table$`Happiness Score`,x = all_table$GDP_PPP_percapita,xlab = GDP_PPP_percapita)
plot(y = all_table$`Happiness Score`,x = all_table$GDP_PPP_percapita,xlab = 'GDP_PPP_percapita',ylab = 'Happiness Score')
plot(y = all_table$`Happiness Score`,x = all_table$GDP_PPP_percapita,xlab = 'GDP_PPP_percapita',ylab = 'Happiness Score',main = "Fig2. Scatter Plot with Linear Regression")
abline(lm(all_table$`Happiness Score`~all_table$GDP_PPP_percapita))
load("C:/onedrive/onedriveSYNC/DS2017/Q3/resit CT/code/all_table.xlsx")
library(readxl)
all_table <- read_excel("C:/onedrive/onedriveSYNC/DS2017/Q3/resit CT/code/all_table.xlsx",
col_types = c("numeric", "text", "numeric",
"numeric"))
View(all_table)
plot(y = all_table$`Happiness Score`,x = all_table$GDP_PPP_percapita,xlab = 'GDP_PPP_percapita',ylab = 'Happiness Score',main = "Fig2. Scatter Plot with Linear Regression")
plot(y = all_table$`Happiness Score`,x = all_table$GDP_PPP_percapita,xlab = 'GDP_PPP_percapita',ylab = 'Happiness Score',main = "Fig2. Scatter Plot with Linear Regression")
options(scipen=3)
plot(y = all_table$`Happiness Score`,x = all_table$GDP_PPP_percapita,xlab = 'GDP_PPP_percapita',ylab = 'Happiness Score',main = "Fig2. Scatter Plot with Linear Regression")
abline(lm(all_table$`Happiness Score`~all_table$GDP_PPP_percapita))
lm(all_table$`Happiness Score`~all_table$GDP_PPP_percapita)
install.packages('outliers')
outliers(all_table$GDP_PPP_percapita)
outlier(all_table$GDP_PPP_percapita)
outliers::outlier(all_table$`Happiness Score`)
outliers::outlier(all_table$GDP_PPP_percapita)
outliers::outlier(all_table$GDP_PPP_percapita,opposite = True)
outliers::outlier(all_table$GDP_PPP_percapita,opposite = TRUE)
plot(all_table$GDP_PPP_percapita,all_table$`Happiness Score`)
plot(all_table$GDP_PPP_percapita,all_table$`Happiness Score`,xlab = 'GDP per capita PPP')
plot(all_table$GDP_PPP_percapita,all_table$`Happiness Score`,xlab = 'GDP per capita PPP',ylab = 'Happiness Score',main = 'Fig3. Scatter plot with Linear Regression')
abline(lm(all_table$`Happiness Score`~all_table$GDP_PPP_percapita))
options(scipen = 200)
plot(all_table$GDP_PPP_percapita,all_table$`Happiness Score`,xlab = 'GDP per capita PPP',ylab = 'Happiness Score',main = 'Fig3. Scatter plot with Linear Regression')
abline(lm(all_table$`Happiness Score`~all_table$GDP_PPP_percapita))
library(readxl)
rich_table <- read_excel("C:/onedrive/onedriveSYNC/DS2017/Q3/resit CT/code/richandpoor.xlsx",
sheet = "rich_table")
View(rich_table)
library(readxl)
poor_table <- read_excel("C:/onedrive/onedriveSYNC/DS2017/Q3/resit CT/code/richandpoor.xlsx",
sheet = "poor_table")
View(poor_table)
t.test(rich_table$`Happiness Score`,poor_table$`Happiness Score`)
t.test(rich_table$`Happiness Score`,poor_table$`Happiness Score`,alternative = 'greater')
lm(all_table$`Happiness Score`~all_table$GDP_PPP_percapita)
c(68.9,
76.0,
75.7,
75.7,
76.1,
77.0,
75.7,
75,
74.4,
75.6,
77.0,
75.9,
76.4,
72.5)
data = c(68.9,
76.0,
75.7,
75.7,
76.1,
77.0,
75.7,
75,
74.4,
75.6,
77.0,
75.9,
76.4,
72.5)
plot(data)
plot(data, kind = "line")
plot(data,type = "l")
labels()
help(plot)
plot(data,type = "b",xlab = "时间",ylab = "体重")
avg(data)
mean(data)
package_version()
package_version("rmarkdown")
exit()
exit
quit
quit()
library("xtable")
install.packages("xtable")
library("xtable")
??xtable
install.packages("dagitty")
??dagitty
quit
quit()\
quit()
#Mode function: gives most occuring value in a given dataset
get_mode <- function(v){
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#Mean absolute deviation: average distance from the average
calc_mean_abs_dev <- function(v){
mean_abs_dev <- sum(abs(v-mean(v)))/length(v)
}
#Mean squared deviation: mean absolute deviation, but with square inside sum:
calc_mean_sqr_dev <- function(v) {
mean_sqr_dev <- sum((v-mean(v))^2)/length(v)
}
#Variance: like mean squared deviation, but you divide by length -1
calc_variance <- function(v){
variance <- sum((v-mean(v))^2)/(length(v)-1)
}
#standard deviation: root of variance
calc_standard_dev <- function(v){
standard_dev <- sqrt(calc_variance(v))
}
#Skewness: This shows how much the data is skewed to one side, aka the peak is nearly on one end of the data
#The direction is which direction the 'tail' is pointing
#If positive, the skew is to the right. If negative, the skew is to the left
calc_skew <- function(v){
s <- calc_variance(v)
z <- (v - mean(v))/s
skewness <- sum(z^3)/length(v)
}
#Kurtosis: How peaky the peak is. A higher kurtosis means the peak is sharper and is called leptokurtic
#A negative kurtosis is called platykurtic and has a stump peak with small tails
#When the kurtosis is between [-0.5, 1.5]  the data is considered mesokurtic or not really pointy but not really stumped either
calc_kurtosis <- function(v){
s <- calc_variance(v)
z <- (v - mean(v))/s
kurtosis <- (sum(z^4)/length(v))-3
}
vote <- read.csv("voting-demo.csv")
summary(vote)
#1: 750 tows and 7 variables. They indicate the unique ID, whether someone voted, their age, whether they go to 'church'
#the choice they made while voting, their education and whether they are old or young
#2: Measurement levels:
#Nominal: choice, church, vote
#Ordinal: educ, agegr
#Interval:
#Ratio: X, Age
#3: Calculate descriptive statistics for each thing. Statistics are:
#Median, mean, mode
#absolute and squared deviation
#Variance and standard deviation
#skewness and kurtosis
calc_all_stats <- function(v){
#calculates a bunch of stats about a numeric vector
#calculates:
#Median, mean, mode
#absolute and squared deviation
#Variance and standard deviation
#skewness and kurtosis
typev <- typeof(v)
print(typev)
#To be done for everything
modev <- get_mode(v)
#Only to be done on numeric data
if(typev == "integer"){
meanv <- mean(v)
medianv <- median(v)
mean_abs_devv <- calc_mean_abs_dev(v)
mean_sqr_devv <- calc_mean_sqr_dev(v)
variancev <- calc_variance(v)
stand_devv <- calc_standard_dev(v)
skewv <- calc_skew(v)
kurtosisv <- calc_kurtosis(v)
}
all_stats <- list(meanv, medianv, modev, mean_abs_devv, mean_sqr_devv, variancev, stand_devv, skewv, kurtosisv, typev)
return(all_stats)
}
stats_X <- calc_all_stats(vote$X)
stats_Vote <- calc_all_stats(vote$Vote)
stats_Age <- calc_all_stats(vote$Age)
stats_Church <- calc_all_stats(vote$Church)
stats_Choice <- calc_all_stats(vote$Choice)
stats_Educ <- calc_all_stats(vote$Educ)
stats_agegr <- calc_all_stats(vote$agegr)
stats_X
vote <- read.csv("C:\Users\Roger Tian\Desktop\menlot\voting-demo.csv")
vote <- read.csv("C:/Users/Roger Tian/Desktop/menlot/voting-demo.csv")
vote <- read.csv("C:/Users/Roger Tian/Desktop/menlot/voting-demo.csv")
summary(vote)
#1: 750 tows and 7 variables. They indicate the unique ID, whether someone voted, their age, whether they go to 'church'
#the choice they made while voting, their education and whether they are old or young
#2: Measurement levels:
#Nominal: choice, church, vote
#Ordinal: educ, agegr
#Interval:
#Ratio: X, Age
#3: Calculate descriptive statistics for each thing. Statistics are:
#Median, mean, mode
#absolute and squared deviation
#Variance and standard deviation
#skewness and kurtosis
calc_all_stats <- function(v){
#calculates a bunch of stats about a numeric vector
#calculates:
#Median, mean, mode
#absolute and squared deviation
#Variance and standard deviation
#skewness and kurtosis
typev <- typeof(v)
print(typev)
#To be done for everything
modev <- get_mode(v)
#Only to be done on numeric data
if(typev == "integer"){
meanv <- mean(v)
medianv <- median(v)
mean_abs_devv <- calc_mean_abs_dev(v)
mean_sqr_devv <- calc_mean_sqr_dev(v)
variancev <- calc_variance(v)
stand_devv <- calc_standard_dev(v)
skewv <- calc_skew(v)
kurtosisv <- calc_kurtosis(v)
}
all_stats <- list(meanv, medianv, modev, mean_abs_devv, mean_sqr_devv, variancev, stand_devv, skewv, kurtosisv, typev)
return(all_stats)
}
stats_X <- calc_all_stats(vote$X)
stats_Vote <- calc_all_stats(vote$Vote)
stats_Age <- calc_all_stats(vote$Age)
stats_Church <- calc_all_stats(vote$Church)
stats_Choice <- calc_all_stats(vote$Choice)
stats_Educ <- calc_all_stats(vote$Educ)
stats_agegr <- calc_all_stats(vote$agegr)
stats_X
vote$Vote
vote$X
clear
clc
stats_X <- calc_all_stats(vote$X)
stats_Vote <- calc_all_stats(vote$Vote)
head(vote$Vote)
median(vote$Vote)
typeof(vote$Vote)
typeof(vote$Vote[1])
vote$Vote[1]
View(vote)
View(vote)
mode(vote$Vote)
class(vote$Vote)
class(vote$Age)
class(vote$Church)
class(vote$agegr)
read.csv("C:\onedrive\onedriveSYNC\DS2017\year_2\Q2\JBI100 Visualization\code\csvdata2.csv")
csvdata = read.csv("C:/onedrive/onedriveSYNC/DS2017/year_2/Q2/JBI100 Visualization/code/csvdata2.csv")
sum(is.na(csvdata))
install.packages("mice")
library("misc")
library("mice")
md.pattern(csvdata)
is.integer(csvdata)
csvdata
csvdata.head()
head(csvdata)
csvdata$time
is.integer(csvdata$time)
is.integer(csvdata$start)
is.integer(csvdata$target)
is.integer(csvdata$weight)
plot(csvdata$time,csvdata$weight)
plot(csvdata$start,csvdata$weight)
plot(x= csvdata$start, y= csvdata$weight)
plot(x= csvdata$time, y= csvdata$weight)
plot(x= csvdata$start, y= csvdata$weight)
boxplot(x= csvdata$start, y= csvdata$weight)
??boxplot
boxplot(csvdata$weight)
??boxplot
librar
library(ggplot2)
??ggplot
boxplot(csvdata$weight)
summary(csvdata)
length(csvdata$weight>23869)
length(csvdata$weight)
csvdata$weight
library("Rcmdr")
?workingdir
??workingdir
getwd
getwd()
load("C:/Users/Roger Tian/Desktop/dataStarInClass.dta")
read.dta("C:/Users/Roger Tian/Desktop/dataStarInClass.dta")
library("Rcmdr")
read.dta("C:/Users/Roger Tian/Desktop/dataStarInClass.dta")
install.packages("haven")
install.packages("haven")
library("haven")
read.dta("C:/Users/Roger Tian/Desktop/dataStarInClass.dta")
read_dta("C:/Users/Roger Tian/Desktop/dataStarInClass.dta")
datfile <- read_dta("C:/Users/Roger Tian/Desktop/dataStarInClass.dta")
dtafile <- read_dta("C:/Users/Roger Tian/Desktop/dataStarInClass.dta")
View(datfile)
dtafile.colum
dtafile.name
name(dtafile)
column(dtafile)
??column]
??column
View(dtafile)
View(dtafile)
dtafile$schidkn
dtafile$schidkn.summary
summary(dtafile$schidkn)
describle(dtafile)
'''hello'''
Sys.info()["user"]
data <- read.csv("../data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
?wd
??wd
getwd()
Sys.info()["user"]
dirname(sys.frame(1)$ofile)
dirname(sys.frame(1))
thisFile <- function() {
cmdArgs <- commandArgs(trailingOnly = FALSE)
needle <- "--file="
match <- grep(needle, cmdArgs)
if (length(match) > 0) {
# Rscript
return(normalizePath(sub(needle, "", cmdArgs[match])))
} else {
# 'source'd via R console
return(normalizePath(sys.frames()[[1]]$ofile))
}
}
thisFile()
View(thisFile)
frame_files <- lapply(sys.frames(), function(x) x$ofile)
frame_files <- Filter(Negate(is.null), frame_files)
PATH <- dirname(frame_files[[length(frame_files)]])
source()
source("~/code/test.r")
library(rstudioapi)
rstudioapi::getActiveDocumentContext()$path
library(rstudioapi)
rstudioapi::getActiveDocumentContext()$path
rstudioapi::getActiveDocumentContext()$path
if (Sys.info()["user"] == "Roger Tian"){
setwd("C:/onedrive/onedriveSYNC/DS2017/year_2/Q3/JBG050 Data Challenge2/Data-Challenge-2")}
data
if (Sys.info()["user"] == "Roger Tian"){
setwd("C:/onedrive/onedriveSYNC/DS2017/year_2/Q3/JBG050 Data Challenge2/Data-Challenge-2")}
data <- read.csv("../data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
ls
if (Sys.info()["user"] == "Roger Tian"){
setwd("C:/onedrive/onedriveSYNC/DS2017/year_2/Q3/JBG050 Data Challenge2/Data-Challenge-2")}
data <- read.csv("../Data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
if (Sys.info()["user"] == "Roger Tian"){
setwd("C:/onedrive/onedriveSYNC/DS2017/year_2/Q3/JBG050 Data Challenge2/Data-Challenge-2")}
data <- read.csv("./Data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data
data.columns()
data.column
data.columns
columns(data)
column(data)
if (Sys.info()["user"] == "Roger Tian"){
setwd("C:/onedrive/onedriveSYNC/DS2017/year_2/Q3/JBG050 Data Challenge2/Data-Challenge-2")}
data <- read.csv("./Data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data["view_frequency"]= data["impressions_inview"]/data["unique_user_inview"]
data["buying_per_impression"]= data["post_click_conv"]+data["post_view_conv"]/data["impressions_inview"]
data["conversion_per_eur"]= 1000*(data["post_click_conv"]+data["post_view_conv"])/data["buyer_bid"]
# lm()
# linear regression
lm(buying_per_impression~view_frequency,data=data)
if (Sys.info()["user"] == "Roger Tian"){
setwd("C:/onedrive/onedriveSYNC/DS2017/year_2/Q3/JBG050 Data Challenge2/Data-Challenge-2")}
data <- read.csv("./Data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data["view_frequency"]= data["impressions_inview"]/data["unique_user_inview"]
data["buying_per_impression"]= data["post_click_conv"]+data["post_view_conv"]/data["impressions_inview"]
data["conversion_per_eur"]= 1000*(data["post_click_conv"]+data["post_view_conv"])/data["buyer_bid"]
# linear regression
lm_buying_per_impression = lm(buying_per_impression~view_frequency,data=data)
summary(lm_buying_per_impression)
if (Sys.info()["user"] == "Roger Tian"){
setwd("C:/onedrive/onedriveSYNC/DS2017/year_2/Q3/JBG050 Data Challenge2/Data-Challenge-2")}
data <- read.csv("./Data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data["view_frequency"]= data["impressions_inview"]/data["unique_user_inview"]
data["buying_per_impression"]= data["post_click_conv"]+data["post_view_conv"]/data["impressions_inview"]
data["conversion_per_eur"]= 1000*(data["post_click_conv"]+data["post_view_conv"])/data["buyer_bid"]
# linear regression
lm_buying_per_impression = lm(buying_per_impression~view_frequency,data=data)
summary(lm_buying_per_impression)
lm_conversion_per_eur = lm(conversion_per_eur,view_frequency,data=data)
summary(lm_conversion_per_eur)
if (Sys.info()["user"] == "Roger Tian"){
setwd("C:/onedrive/onedriveSYNC/DS2017/year_2/Q3/JBG050 Data Challenge2/Data-Challenge-2")}
data <- read.csv("./Data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data["view_frequency"]= data["impressions_inview"]/data["unique_user_inview"]
data["buying_per_impression"]= data["post_click_conv"]+data["post_view_conv"]/data["impressions_inview"]
data["conversion_per_eur"]= 1000*(data["post_click_conv"]+data["post_view_conv"])/data["buyer_bid"]
# linear regression
lm_buying_per_impression = lm(buying_per_impression~view_frequency,data=data)
summary(lm_buying_per_impression)
lm_conversion_per_eur = lm(conversion_per_eur~view_frequency,data=data)
summary(lm_conversion_per_eur)
summary(lm(conversion_per_eur~view_frequency+device_type,data=data))
summary(lm(conversion_per_eur~view_frequency+operating_system,data=data))
if (Sys.info()["user"] == "Roger Tian"){
setwd("C:/onedrive/onedriveSYNC/DS2017/year_2/Q3/JBG050 Data Challenge2/Data-Challenge-2")}
data <- read.csv("./Data/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data["view_frequency"]= data["impressions_inview"]/data["unique_user_inview"]
data["buying_per_impression"]= (data["post_click_conv"]+data["post_view_conv"])/data["impressions_inview"]
data["conversion_per_eur"]= 1000*(data["post_click_conv"]+data["post_view_conv"])/data["buyer_bid"]
# linear regression
lm_buying_per_impression = lm(buying_per_impression~view_frequency,data=data)
summary(lm_buying_per_impression)
lm_conversion_per_eur = lm(conversion_per_eur~view_frequency,data=data)
summary(lm_conversion_per_eur)
summary(lm(conversion_per_eur~view_frequency+device_type,data=data))
summary(lm(conversion_per_eur~view_frequency+operating_system,data=data))
