knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(haven)
datastar <- as.data.frame(read_stata("dataStarInClass.dta"))
datastar <- datastar[,c('cltypek','schidkn','srace','ssex', 'sesk', 'tracek', 'hdegk', 'pscore', 'female', 'totexpk')]
#PREPROCESSING ========================================
# NOMINAL
#  classroom type in kindergarten
datastar$cltypek <- factor(datastar$cltypek,levels=c(1,2,3),labels=c("small class","regular class", "regular class + aide c"))
#  school ID-k of (new) kindergarten
datastar$schidkn <- factor(datastar$schidkn)
#  student race
datastar$srace <- factor(datastar$srace,levels=1:6,labels=c("white", "black", "Asian", "Hispanic", "Indian", "other"))
#  student sex
datastar$ssex <- factor(datastar$ssex,levels=1:2,labels=c("male","female"))
#  socioeconomic status - a factor with levels F and N representing eligible for free lunches or not eligible
datastar$sesk <- factor(datastar$sesk,levels=1:2,labels=c("free lunch","no free lunch"))
#  tracek teacher race in kindergarten
datastar$tracek <- factor(datastar$tracek,levels=1:6,labels=c("white", "black", "Asian", "Hispanic", "Indian", "other"))
# NOMINAL - BINARY
#  Small class
datastar$class_small <- ifelse(datastar$cltypek=="small class",1,0)
#  Regular class + aide
datastar$class_r_aide <- ifelse(datastar$cltypek=="regular class + aide c",1,0)
# ORDINAL
# highest degree (tch) of kindergarten teacher
datastar$hdegk <- factor(datastar$hdegk, levels=1:6, labels=c("ASSOC","BS/BA","MS/MA/MEd","MA+","Ed.S","Ed.D/Ph.D"), ordered=TRUE)
#CREATING MODEL =======================================
model <- lm(pscore ~ class_small + class_r_aide + srace + female + sesk + totexpk + tracek + hdegk + schidkn, data=datastar)
#predict(model, newdata=as.data.frame(datastar[3,]))
library(MatchIt)
# Nearest neigbours cannot handle empty values, so these are deleted from the dataset.
datastar <- na.omit(datastar)
m.out <- matchit(class_small ~ srace + female + sesk + tracek + hdegk + schidkn, data=datastar, method="nearest", ratio=1)
summary(m.out)[2]
summary(m.out)[1]
summary(m.out)[3]
summary(m.out)
summary(m.out)$pscore
summary(m.out)
m.data <- match.data(m.out)
print(m.data)
m.data <- match.data(m.out)
print(m.data[m.data$distance==0.1978670,])
m.data <- match.data(m.out)
print(m.data[m.data$distance>0.1,])
m.data <- match.data(m.out)
print(m.data[m.data$distance<0.2,])
m.data <- match.data(m.out)
print(m.data[m.data$distance<0.185,])
m.data <- match.data(m.out)
print(m.data[m.data$distance<0.15,])
m.data <- match.data(m.out)
print(m.data[m.data$distance<0.12,])
m.data <- match.data(m.out)
print(m.data[m.data$weights<1,])
m.data <- match.data(m.out)
print(m.data[m.data$weights==1,])
library(MatchIt)
# Nearest neigbours cannot handle empty values, so these are deleted from the dataset.
datastar <- na.omit(datastar)
m.out <- matchit(class_small ~ srace + female + sesk + tracek + hdegk + schidkn, data=datastar, method="exact", ratio=1)
summary(m.out)[2]
library(MatchIt)
# Nearest neigbours cannot handle empty values, so these are deleted from the dataset.
datastar <- na.omit(datastar)
m.out <- matchit(class_small ~ srace + female + sesk + tracek + hdegk + schidkn, data=datastar, method="nearest", ratio=1)
summary(m.out)[2]
library(MatchIt)
# Nearest neigbours cannot handle empty values, so these are deleted from the dataset.
datastar <- na.omit(datastar)
m.out <- matchit(class_small ~ srace + female + sesk + tracek + hdegk + schidkn, data=datastar, method="nearest")
summary(m.out)[2]
m.data <- match.data(m.out)
print(m.data[m.data$weights==1,])
m.data <- match.data(m.out)
ATET <- mean(m.data[m.data$class_small==1], pscore) - mean(m.data[m.data$class_small==0], pscore)
m.data <- match.data(m.out)
ATET <- mean(m.data[m.data$class_small==1], 'pscore') - mean(m.data[m.data$class_small==0], 'pscore')
m.data <- match.data(m.out)
ATET <- mean(m.data[m.data$class_small==1], 'pscore') - mean(m.data[m.data$class_small==0], 'pscore')
m.data <- match.data(m.out)
ATET <- mean(m.data[m.data$class_small==1, 'pscore']) - mean(m.data[m.data$class_small==0, 'pscore'])
print(ATET)
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# PREPROCESSING
data <- read.csv("original dataset/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# CORRELATING BUYER BID WITH OUTCOMES
cor(data$buyer_bid, data[,colnames(data)[18:ncol(data)]], use = "pairwise")
### Clicks and unique_user_is_click correlate best and about as much
buyer_bid_est <- lm(buyer_bid ~ clicks + post_click_conv + post_view_conv + unique_user_impressions +
unique_user_inview + unique_user_is_click, data = data)
### However, those two variables are not considered to have a significant effect here. (Be aware of collinearity, though.)
data$exp_bid <- buyer_bid_est$fitted.values
data$bid_difference <- data$exp_bid - data$buyer_bid
boxplot(bid_difference ~ operating_system, data = data)
### Excuse me, what the f***?
plot(data$exp_bid, data$buyer_bid)
### Outliers spotted, use logarithmic values
### Heinz, Amro and Achmea have buyer_bids = 0?!
cor(data$buyer_bid ~ test_group)
cor(buyer_bid ~ test_group, data=data)
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# PREPROCESSING
data <- read.csv("original dataset/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# CORRELATING BUYER BID WITH OUTCOMES
cor(data$buyer_bid, data[,colnames(data)[18:ncol(data)]], use = "pairwise")
### Clicks and unique_user_is_click correlate best and about as much
buyer_bid_est <- lm(buyer_bid ~ clicks + post_click_conv + post_view_conv + unique_user_impressions +
unique_user_inview + unique_user_is_click, data = data)
### However, those two variables are not considered to have a significant effect here. (Be aware of collinearity, though.)
data$exp_bid <- buyer_bid_est$fitted.values
data$bid_difference <- data$exp_bid - data$buyer_bid
boxplot(bid_difference ~ operating_system, data = data)
### Excuse me, what the f***?
plot(data$exp_bid, data$buyer_bid)
### Outliers spotted, use logarithmic values
### Heinz, Amro and Achmea have buyer_bids = 0?!
### Interest of agency (by Jaymon)
cor(buyer_bid ~ test_group, data=data)
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# PREPROCESSING
data <- read.csv("original dataset/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# CORRELATING BUYER BID WITH OUTCOMES
cor(data$buyer_bid, data[,colnames(data)[18:ncol(data)]], use = "pairwise")
### Clicks and unique_user_is_click correlate best and about as much
buyer_bid_est <- lm(buyer_bid ~ clicks + post_click_conv + post_view_conv + unique_user_impressions +
unique_user_inview + unique_user_is_click, data = data)
### However, those two variables are not considered to have a significant effect here. (Be aware of collinearity, though.)
data$exp_bid <- buyer_bid_est$fitted.values
data$bid_difference <- data$exp_bid - data$buyer_bid
boxplot(bid_difference ~ operating_system, data = data)
### Excuse me, what the f***?
plot(data$exp_bid, data$buyer_bid)
### Outliers spotted, use logarithmic values
### Heinz, Amro and Achmea have buyer_bids = 0?!
### Interest of agency (by Jaymon)
cor(data$buyer_bid, data$test_group)
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# PREPROCESSING
data <- read.csv("original dataset/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# two-sample t-test:
data_ttest <- dcast(campaign_id+device_type+operating_system~test_group)
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("data.table")) install.packages("data.table")
library(data.table)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# PREPROCESSING
data <- read.csv("original dataset/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# two-sample t-test:
data_ttest <- dcast(campaign_id+device_type+operating_system~test_group)
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("data.table")) install.packages("data.table")
library(data.table)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# PREPROCESSING
data <- read.csv("original dataset/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# two-sample t-test:
data_ttest <- dcast(data, campaign_id+device_type+operating_system~test_group)
View(data_ttest)
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("data.table")) install.packages("data.table")
library(data.table)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# PREPROCESSING
data <- read.csv("original dataset/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# two-sample t-test:
data_ttest <- dcast(data, campaign_id+device_type+operating_system~test_group, fun.aggregate=mean(data$buyer_bid))
# LOADING PACKAGES
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if (!require("data.table")) install.packages("data.table")
library(data.table)
# SET WORKING DIRECTORY TO FILE DIRECTORY (RSTUDIO ONLY)
# You may need to install the lastest version of the rstudioapi.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# PREPROCESSING
data <- read.csv("original dataset/DataChallenge2019_GreenhouseGroup_Bidding_Algorithms_Tests.csv", sep=";")
data$advertiser_id <- factor(data$advertiser_id)
data$campaign_group_id <- factor(data$campaign_group_id)
data$campaign_id <- factor(data$campaign_id)
data$start_date <- as.Date(data$start_date)
data$end_date <- as.Date(data$end_date)
### Weird empty lines in the middle of the data frame.
data <- data[!is.na(data$advertiser_id),]
data2 <- data
data2$small_per_impression <- data$creative_size_small / data$impressions
data2$medium_per_impression <- data$creative_size_medium / data$impressions
data2$large_per_impression <- data$creative_size_large / data$impressions
data2$inview_per_impression <- data$impressions_inview / data$impressions
data2$abovefold_per_impression <- data$impressions_above_fold / data$impressions
data2$clicks_per_impression <- data$clicks / data$impressions
data2$conv_per_inview <- data$post_view_conv / data$impressions_inview
data2$conv_per_click <- data$post_click_conv / data$clicks
data2$UU_inview_per_UU_impression <- data$unique_user_inview / data$unique_user_impressions
data2$UU_click_per_UU_impression <- data$unique_user_is_click / data$unique_user_impressions
data2$UU_conv_per_UU_inview <- data$unique_user_post_view_conv / data$unique_user_inview
data2$UU_conv_per_UU_click <- data$unique_user_post_click_conv / data$unique_user_is_click
# EXPLORING DATA
# two-sample t-test:
data_ttest <- dcast(data, campaign_id+device_type+operating_system~test_group, fun.aggregate=mean(data$buyer_bid))
